/**
 * üî• TESTE ESPEC√çFICO - Campo de Texto Longo com M√∫ltiplas Classifica√ß√µes
 * 
 * Este teste simula EXATAMENTE o problema reportado pelo usu√°rio:
 * - Digita√ß√£o em campos de "problem_detail" (campos longos)
 * - M√∫ltiplas abas de classifica√ß√£o sendo editadas
 * - Tentativas de altera√ß√£o m√∫ltiplas (4-5 vezes)
 * 
 * Execute no console da p√°gina de an√°lise
 */

console.log('%cüî• TESTE ESPEC√çFICO - Campos de Texto Longo', 'color: red; font-size: 16px; font-weight: bold');
console.log('üéØ Simulando o problema exato reportado pelo usu√°rio...');

// Evitar redeclara√ß√£o se script for carregado m√∫ltiplas vezes
if (typeof window.TextFieldStressTest !== 'undefined') {
  console.log('üîÑ Script j√° carregado - usando inst√¢ncia existente');
  window.textFieldTest.runTest();
  throw new Error('SCRIPT_ALREADY_LOADED'); // Para o resto da execu√ß√£o
}

class TextFieldStressTest {
  constructor() {
    this.startMemory = this.getMemory();
    this.timeouts = new Set();
    this.intervals = new Set(); 
    this.renderCount = 0;
    this.startTime = performance.now();
    this.errorCount = 0;
  }

  getMemory() {
    return performance.memory ? Math.round(performance.memory.usedJSHeapSize / 1024 / 1024) : 0;
  }

  async runFieldTest() {
    console.log('üß™ INICIANDO TESTE DE CAMPOS DE TEXTO LONGO');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log(`üìä Mem√≥ria inicial: ${this.startMemory} MB`);
    console.log('');

    try {
      // 1. Encontrar campos de problema/detalhamento
      const textFields = this.findProblemDetailFields();
      console.log(`üìù Encontrados ${textFields.length} campos de texto longo`);

      if (textFields.length === 0) {
        console.warn('‚ö†Ô∏è Nenhum campo de texto encontrado - abra um modal de edi√ß√£o primeiro');
        return;
      }

      // 2. Monitorar performance durante digita√ß√£o
      this.startPerformanceMonitoring();

      // 3. Simular digita√ß√£o pesada em m√∫ltiplos campos
      await this.simulateHeavyTyping(textFields);

      // 4. Simular tentativas m√∫ltiplas (problema relatado)
      await this.simulateMultipleAttempts(textFields);

      // 5. Gerar relat√≥rio
      this.generateFieldTestReport();

    } catch (error) {
      console.error('‚ùå Erro durante teste:', error);
      this.errorCount++;
    }
  }

  findProblemDetailFields() {
    const selectors = [
      'textarea[placeholder*="detalhes"]',
      'textarea[placeholder*="problema"]',
      'textarea[placeholder*="adicional"]',
      'textarea[rows="3"]',
      'textarea.text-sm',
      'input[name*="detail"]',
      'textarea[name*="detail"]'
    ];

    let fields = [];
    for (let selector of selectors) {
      fields.push(...document.querySelectorAll(selector));
    }

    return fields.filter(field => field.offsetParent !== null);
  }

  startPerformanceMonitoring() {
    console.log('üìà Iniciando monitoramento de performance...');
    
    // Monitor de re-renders (detectar atrav√©s de mudan√ßas no DOM)
    const observer = new MutationObserver((mutations) => {
      this.renderCount += mutations.length;
      
      if (this.renderCount > 500) {
        console.warn(`‚ö†Ô∏è MUITOS RE-RENDERS: ${this.renderCount}`);
      }
    });

    // Observar mudan√ßas no DOM que indicam re-renders
    observer.observe(document.body, {
      childList: true,
      subtree: true,
      attributes: true
    });

    // Monitor de mem√≥ria
    const memoryMonitor = setInterval(() => {
      const currentMemory = this.getMemory();
      const increase = currentMemory - this.startMemory;
      
      if (increase > 100) {
        console.error(`üö® VAZAMENTO DE MEM√ìRIA: +${increase} MB`);
      }
    }, 2000);

    this.intervals.add(memoryMonitor);
    
    // Parar observer ap√≥s teste
    setTimeout(() => {
      observer.disconnect();
    }, 30000);
  }

  async simulateHeavyTyping(fields) {
    console.log('‚å®Ô∏è Simulando digita√ß√£o pesada...');
    
    const longTexts = [
      'Este √© um problema muito detalhado que requer uma descri√ß√£o extensa para capturar todas as nuances da situa√ß√£o. O cliente relatou m√∫ltiplas quest√µes relacionadas ao atendimento, incluindo demora na resposta, falta de cortesia da equipe, problemas com o sistema de reservas que n√£o funcionou corretamente durante o check-in, gerando constrangimento e perda de tempo. Al√©m disso, houve quest√µes com a limpeza do quarto que n√£o estava adequada aos padr√µes esperados.',
      
      'Situa√ß√£o complexa envolvendo m√∫ltiplos departamentos. Inicialmente, o problema come√ßou na recep√ß√£o com informa√ß√µes incorretas sobre os servi√ßos dispon√≠veis. Em seguida, a governan√ßa n√£o conseguiu resolver quest√µes de manuten√ß√£o no quarto, o que resultou em transfer√™ncia desnecess√°ria. O departamento de alimentos e bebidas tamb√©m apresentou falhas no atendimento durante o caf√© da manh√£, com produtos em falta e demora excessiva no service. A TI foi acionada para resolver problemas com WiFi mas n√£o houve solu√ß√£o efetiva.',
      
      'Detalhamento t√©cnico da ocorr√™ncia: Sistema de ar condicionado apresentou mau funcionamento √†s 14:30, temperatura ambiente subiu para 28¬∞C, h√≥spede relatou desconforto extremo. Manuten√ß√£o foi acionada √†s 14:45 mas s√≥ chegou √†s 16:20, tempo de resposta inadequado. T√©cnico identificou problema no compressor que requeria pe√ßa de reposi√ß√£o n√£o dispon√≠vel no estoque. Solu√ß√£o tempor√°ria oferecida (ventilador) foi insuficiente. H√≥spede solicitou troca de quarto mas n√£o havia disponibilidade no andar.',
    ];

    // Testar cada campo com texto longo
    for (let i = 0; i < Math.min(fields.length, 5); i++) {
      const field = fields[i];
      const text = longTexts[i % longTexts.length];
      
      console.log(`üìù Campo ${i + 1}: Digitando ${text.length} caracteres...`);
      
      try {
        field.focus();
        await this.wait(100);

        // Simular digita√ß√£o caractere por caractere (problema real!)
        for (let charIndex = 0; charIndex < text.length; charIndex++) {
          field.value = text.substring(0, charIndex + 1);
          
          // Disparar eventos como usu√°rio real
          field.dispatchEvent(new Event('input', { bubbles: true }));
          
          // Medir performance a cada 50 caracteres
          if (charIndex % 50 === 0) {
            const currentMemory = this.getMemory();
            const increase = currentMemory - this.startMemory;
            console.log(`   ${charIndex}/${text.length} chars - Mem√≥ria: +${increase}MB - Re-renders: ${this.renderCount}`);
            
            if (increase > 50) {
              console.warn(`   ‚ö†Ô∏è Mem√≥ria crescendo rapidamente!`);
            }
          }
          
          // Delay m√≠nimo entre caracteres (velocidade humana)
          if (charIndex % 10 === 0) {
            await this.wait(5);
          }
        }

        // Trigger final
        field.dispatchEvent(new Event('change', { bubbles: true }));
        field.blur();
        
        console.log(`   ‚úÖ Campo ${i + 1} conclu√≠do`);
        await this.wait(500);

      } catch (error) {
        console.error(`   ‚ùå Erro no campo ${i + 1}:`, error.message);
        this.errorCount++;
      }
    }
  }

  async simulateMultipleAttempts(fields) {
    console.log('üîÑ Simulando m√∫ltiplas tentativas (4-5x como relatado)...');
    
    if (fields.length === 0) return;
    
    const field = fields[0]; // Usar primeiro campo
    const shortText = 'Tentativa de edi√ß√£o n√∫mero ';
    
    for (let attempt = 1; attempt <= 5; attempt++) {
      console.log(`üîÑ Tentativa ${attempt}/5...`);
      
      try {
        field.focus();
        
        // Limpar e digitar novo conte√∫do
        field.value = '';
        const fullText = shortText + attempt + ' - Testando se travamento persiste ap√≥s corre√ß√£o de debounce';
        
        // Digita√ß√£o mais r√°pida (usu√°rio tentando v√°rias vezes)
        for (let i = 0; i < fullText.length; i++) {
          field.value = fullText.substring(0, i + 1);
          field.dispatchEvent(new Event('input', { bubbles: true }));
          
          if (i % 20 === 0) {
            await this.wait(2); // Digita√ß√£o mais r√°pida
          }
        }
        
        field.dispatchEvent(new Event('change', { bubbles: true }));
        
        // Simular tentativa de salvar ou mudar para pr√≥ximo campo
        await this.wait(300);
        field.blur();
        await this.wait(200);
        
        const currentMemory = this.getMemory();
        console.log(`   Tentativa ${attempt}: ${currentMemory - this.startMemory}MB, Re-renders: ${this.renderCount}`);
        
      } catch (error) {
        console.error(`   ‚ùå Erro na tentativa ${attempt}:`, error.message);
        this.errorCount++;
      }
    }
  }

  generateFieldTestReport() {
    const finalMemory = this.getMemory();
    const totalIncrease = finalMemory - this.startMemory;
    const testDuration = (performance.now() - this.startTime) / 1000;

    console.log('');
    console.log('üìä RELAT√ìRIO FINAL - TESTE DE CAMPOS DE TEXTO');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    
    // Analisar se o problema foi resolvido
    const hasPerformanceIssue = totalIncrease > 100 || this.renderCount > 1000 || this.errorCount > 3;
    const hasMinorIssue = totalIncrease > 50 || this.renderCount > 500;
    
    let status, color;
    if (hasPerformanceIssue) {
      status = '‚ùå PROBLEMA PERSISTE';
      color = 'color: red; font-weight: bold';
    } else if (hasMinorIssue) {
      status = '‚ö†Ô∏è MELHOROU MAS AINDA H√Å OTIMIZA√á√ïES';
      color = 'color: orange; font-weight: bold';
    } else {
      status = '‚úÖ PROBLEMA RESOLVIDO!';
      color = 'color: green; font-weight: bold';
    }

    console.log(`%c${status}`, color);
    console.log('');

    console.log('üìà M√âTRICAS DO TESTE:');
    console.log(`   ‚è±Ô∏è Dura√ß√£o: ${testDuration.toFixed(2)}s`);
    console.log(`   üíæ Mem√≥ria inicial: ${this.startMemory}MB`);
    console.log(`   üíæ Mem√≥ria final: ${finalMemory}MB`);
    console.log(`   üíæ Aumento: ${totalIncrease.toFixed(2)}MB`);
    console.log(`   üîÑ Re-renders detectados: ${this.renderCount}`);
    console.log(`   ‚ùå Erros: ${this.errorCount}`);
    console.log('');

    console.log('üîç DIAGN√ìSTICO:');
    if (hasPerformanceIssue) {
      console.log('%c   üö® Problema ainda existe!', 'color: red; font-weight: bold');
      console.log('   üìã Poss√≠veis causas restantes:');
      if (this.renderCount > 1000) console.log('      ‚Ä¢ Re-renders excessivos ainda ocorrendo');
      if (totalIncrease > 100) console.log('      ‚Ä¢ Vazamentos de mem√≥ria ainda presentes');
      if (this.errorCount > 3) console.log('      ‚Ä¢ Muitos erros durante digita√ß√£o');
    } else if (hasMinorIssue) {
      console.log('%c   ‚ö° Melhorias detectadas, mas ainda h√° otimiza√ß√µes', 'color: orange');
      console.log('   üîß Debounce funcionando, performance melhorou');
    } else {
      console.log('%c   üéâ PROBLEMA RESOLVIDO COMPLETAMENTE!', 'color: green; font-weight: bold');
      console.log('   ‚úÖ Debounce implementado com sucesso');
      console.log('   ‚úÖ Re-renders controlados');
      console.log('   ‚úÖ Mem√≥ria est√°vel durante digita√ß√£o longa');
      console.log('   ‚úÖ M√∫ltiplas tentativas n√£o causam travamento');
    }

    // Limpeza
    console.log('');
    console.log('üßπ Executando limpeza...');
    this.cleanup();
  }

  cleanup() {
    this.timeouts.forEach(id => clearTimeout(id));
    this.intervals.forEach(id => clearInterval(id));
    console.log(`‚úÖ ${this.timeouts.size + this.intervals.size} timers limpos`);
  }

  async wait(ms) {
    return new Promise(resolve => {
      const timeoutId = setTimeout(() => {
        this.timeouts.delete(timeoutId);
        resolve();
      }, ms);
      this.timeouts.add(timeoutId);
    });
  }
}

// üöÄ AUTO-EXECUTAR
setTimeout(() => {
  const tester = new TextFieldStressTest();
  tester.runFieldTest();
}, 1000);

// Disponibilizar para uso manual
window.TextFieldStressTest = TextFieldStressTest;
window.textFieldTest = {
  runTest: () => new TextFieldStressTest().runFieldTest()
};

console.log('');
console.log('üéÆ COMANDO MANUAL:');
console.log('   textFieldTest.runTest() - Executar teste espec√≠fico de campos');
